<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Twilio Conversations Widget</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <style>
      :root {
        --body-bg: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        --msger-bg: #fff;
        --border: 2px solid #ddd;
        --left-msg-bg: #edeff2;
        --right-msg-bg: #2c7cb5;
        /* --left-msg-bg: #ececec; */
        /* --right-msg-bg: #579ffb; */
      }
      html {
        box-sizing: border-box;
      }
      *,
      *:before,
      *:after {
        margin: 0;
        padding: 0;
        box-sizing: inherit;
      }
      body {
        display: flex;
        justify-content: center;
        /* align-items: center; */
        height: 100vh;
        background-image: var(--body-bg);
        font-family: Helvetica, sans-serif;
      }
      a {
        color: #666;
        text-decoration: none;
      }
      a:hover, a:active {
        font-weight: bold;
      }
      .msger {
        display: flex;
        flex-flow: column wrap;
        justify-content: space-between;
        width: 100%;
        max-width: 867px;
        margin: 25px 10px;
        height: calc(100% - 50px);
        border: var(--border);
        border-radius: 5px;
        background: var(--msger-bg);
        box-shadow: 0 15px 15px -5px rgba(0, 0, 0, 0.2);
      }
      .msger-header {
        display: flex;
        justify-content: space-between;
        padding: 10px;
        border-bottom: var(--border);
        background: #f6f7f8;
        /* background: #2d323a; */
        color: #666;
        /* color: #EDEFF2; */
      }
      .sidebar {
        margin: 25px 0 25px 10px;
        background-color: white;
        width: 260px;
        border: var(--border);
        border-radius: 5px;
        background: var(--msger-bg);
        box-shadow: 0 15px 15px -5px rgba(0, 0, 0, 0.2);
      }
      .conversation-bubble {
        max-width: 450px;
        padding: 25px;
        border-bottom: var(--border);
        margin: 0;
      }
      .selectedConversation {
        background-color: #f6f7f8;
        font-weight: bold;
      }
      .msger-chat {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
      }
      .msger-chat::-webkit-scrollbar {
        width: 6px;
      }
      .msger-chat::-webkit-scrollbar-track {
        background: #ddd;
      }
      .msger-chat::-webkit-scrollbar-thumb {
        background: #bdbdbd;
      }
      .msg {
        display: flex;
        align-items: flex-end;
        margin-bottom: 10px;
      }
      .msg:last-of-type {
        margin: 0;
      }
      .msg-img {
        width: 50px;
        height: 50px;
        margin-right: 10px;
        background: #ddd;
        background-repeat: no-repeat;
        background-position: center;
        background-size: cover;
        border-radius: 50%;
      }
      .msg-bubble {
        max-width: 450px;
        padding: 15px;
        border-radius: 15px;
        background: var(--left-msg-bg);
      }
      .msg-footer {
        margin: -4px 4px 10px 4px;
        font-size: 0.8em;
        color: #666;
      }
      .left-msg .msg-bubble {
        border-bottom-left-radius: 0;
      }
      .right-msg {
        flex-direction: row-reverse;
        text-align: right;
      }
      .right-msg .msg-bubble {
        background: var(--right-msg-bg);
        color: #fff;
        border-bottom-right-radius: 0;
      }
      .right-msg .msg-img {
        margin: 0 0 0 10px;
      }
      .msger-inputarea {
        display: flex;
        padding: 10px;
        border-top: var(--border);
        /* background: #eee; */
        background: #f6f7f8;
      }
      .msger-inputarea * {
        padding: 10px;
        border: none;
        border-radius: 3px;
        font-size: 1em;
      }
      .msger-input {
        flex: 1;
        /* background: #ddd; */
        background: #eee;
      }
      .msger-send-btn {
        margin-left: 10px;
        background: #fb713f;
        /* background: rgb(0, 196, 65); */
        color: #fff;
        font-weight: bold;
        cursor: pointer;
        transition: background 0.23s;
      }
      .msger-send-btn:hover {
        background: rgb(0, 180, 50);
      }
      .msger-chat {
        background-color: #fcfcfe;
      }
    </style>
  </head>
  <body>
    <div class="sidebar">
      <header class="msger-header">
        <div class="msger-header-title">
          <i class="fas fa-user"></i>&nbsp;&nbsp; CONTACTS
        </div>
        <div class="msger-header-options">
          <!-- <span><i class="fas fa-phone"></i></span> -->
        </div>
      </header>
      <div class="conversation-list">
        <!-- conversationListHTML goes here -->
      </div>
    </div>
    <section class="msger">
      <header class="msger-header">
        <div class="msger-header-title">
          <i class="fas fa-comment-alt"></i>&nbsp;&nbsp; TWILIO &mdash; <%=
          landline %>
        </div>
        <div class="msger-header-options">
          <!-- <span><i class="fas fa-cog"></i></span> -->
        </div>
      </header>

      <main class="msger-chat"></main>

      <form class="msger-inputarea">
        <input
          type="text"
          class="msger-input"
          id="message"
          name="message"
          placeholder="Enter your message..."
        />
        <button type="submit" class="msger-send-btn">Send</button>
      </form>
    </section>
    <script src="https://use.fontawesome.com/releases/v5.0.13/js/all.js"></script>

    <script>
      let mobile = "<%= mobile %>";
      console.log("DEFAULT MOBILE: " + mobile);
      // check for ?mobile=2065551212
      var urlParams = new URLSearchParams(window.location.search);
      console.log("URL PARAMS: " + urlParams);
      if (urlParams.has("mobile")) {
        mobile = "+1" + urlParams.get("mobile");
        console.log(`URL PARAMS MOBILE: ${mobile}`);
      }
      const host = location.origin;
      console.log("HOST: " + host);
      const wsHost = host.replace(/^http/, "ws");
      console.log("WSHOST: " + wsHost);
      const wsClient = new WebSocket(wsHost);

      wsClient.onopen = () => {
        console.log("ON OPEN");
        console.log("Websocket connected to: " + wsClient.url);
      };

      wsClient.onclose = () => {
        console.log("ON CLOSE");
      };

      // Use Set() to extract unique mobile numbers from messages array
      // https://levelup.gitconnected.com/how-to-find-unique-values-by-property-in-an-array-of-objects-in-javascript-50ca23db8ccc
      const uniqueMobileNumbersSet = new Set();
      // uniqueMobileNumbersSet.add("+12067245169");
      // uniqueMobileNumbersSet.add("+12067245201");
      // uniqueMobileNumbersSet.add("+12063693826");
      // uniqueMobileNumbersSet.add("+12068163598");
      // uniqueMobileNumbersSet.add("+12068231284");
      // uniqueMobileNumbersSet.add("+12063996576");

      // MESSAGE RECEIVED FROM SERVER ->
      wsClient.onmessage = (event) => {
        const messages = JSON.parse(event.data);
        console.log("CLIENT ONMESSAGE");
        console.log("EVENT.ORIGIN: " + event.origin);
        // console.log(event);
        // console.log(messages);
        if (messages.length > 0) {
          console.log("MESSAGES.LENGTH: " + messages.length);
          messages.forEach((thisMessage) => {
            // console.log(thisMessage);
            thisMessage = JSON.parse(thisMessage);
            uniqueMobileNumbersSet.add(thisMessage.mobile);
            // console.log(thisMessage);
            // console.log(thisMessage.direction);
            // console.log(thisMessage.body);
            // Only render messages that are for the selected conversation mobile number
            if (thisMessage.mobile == mobile) {
              renderConversation(thisMessage);
            }
          });
          // msgerInput.value = "";
        }
        // console.log("UNIQUE MOBILE NUMBERS SET:");
        // console.log(uniqueMobileNumbersSet);
        console.log("MOBILE: " + mobile);
        let uniqueMobileNumbers = Array.from(uniqueMobileNumbersSet).reverse();
        console.log("UNIQUE MOBILE NUMBERS:");
        console.log(uniqueMobileNumbers);
        let conversationListHTML = "";
        let formattedMobile = "";
        uniqueMobileNumbers.forEach((mobileNumber) => {
          // console.log("APPEND CONVERSATION LIST:");
          // console.log(mobileNumber);
          formattedMobile = formatMobile(mobileNumber);
          if (mobile == mobileNumber) {
            // Set background color style for selectedConversation
            conversationListHTML += `
            <div class="conversation-bubble selectedConversation">
              <a href="?mobile=${mobileNumber.slice(2)}">${formattedMobile}</a>
            </div>
          `;
          } else {
            conversationListHTML += `
            <div class="conversation-bubble">
              <a href="?mobile=${mobileNumber.slice(2)}">${formattedMobile}</a>
            </div>
          `;
          }
        });
        // console.log("CONVERSATION LIST HTML:");
        // console.log(conversationListHTML);
        conversationList.innerHTML = conversationListHTML;
      };

      function renderConversation(thisMessage) {
        if (thisMessage.direction == "inbound") {
          // MESSAGE RECEIVE
          appendMessage(
            MOBILE_NAME,
            MOBILE_IMG,
            "left",
            thisMessage.body,
            formatDate(thisMessage.dateCreated)
          );
        } else if (thisMessage.body) {
          // MESSAGE SEND
          appendMessage(
            LANDLINE_NAME,
            LANDLINE_IMG,
            "right",
            thisMessage.body,
            formatDate(thisMessage.dateCreated)
          );
        }
      }

      // Icons made by Freepik from www.flaticon.com
      const LANDLINE_IMG =
        "https://image.flaticon.com/icons/svg/327/327779.svg";
      const MOBILE_IMG = "https://image.flaticon.com/icons/svg/145/145867.svg";
      const LANDLINE_NAME = "Twilio";
      const MOBILE_NAME = "Mobile";

      const msgerForm = get(".msger-inputarea");
      const msgerInput = get(".msger-input");
      const msgerChat = get(".msger-chat");
      const conversationList = get(".conversation-list");

      msgerForm.addEventListener("submit", (event) => {
        event.preventDefault();

        const body = msgerInput.value;
        if (!body) return;
        msgerInput.value = "";

        // MESSAGE/SEND
        messageSend(body, mobile);
      });

      // APPEND MESSAGE - Render last message
      function appendMessage(name, img, side, text, date) {
        //   Simple solution for small apps
        const msgHTML = `
        <div class="msg ${side}-msg">
          <!-- <div class="msg-img" style="background-image: url(${img})"></div> -->
          <div class="msg-bubble">
            <div class="msg-text">${text}</div>
          </div>
        </div>
        <div class="msg-footer ${side}-msg">${name} • ${date}</div>
      `;

        msgerChat.insertAdjacentHTML("beforeend", msgHTML);
        msgerChat.scrollTop += 500;
      }

      // Utils
      function get(selector, root = document) {
        return root.querySelector(selector);
      }

      // Display date as hh:mm:ss
      function formatDate(date) {
        return `${date.slice(11, 13)}:${date.slice(14, 16)}:${date.slice(
          17,
          19
        )}`;
      }

      // Display phone number as (###) ###-####
      function formatMobile(mobile) {
        return `(${mobile.slice(2, 5)}) ${mobile.slice(5, 8)}-${mobile.slice(
          8,
          12
        )}`;
      }

      // MESSAGE SEND
      function messageSend(body, mobile) {
        // FETCH
        const apiUrl = host + "/messagesend";
        console.log("APIURL: " + apiUrl);
        // url encode body params
        const bodyParams = new URLSearchParams({
          body: body,
          mobile: mobile,
        });
        const requestOptions = {
          method: "POST",
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
          body: bodyParams,
        };
        fetch(apiUrl, requestOptions)
          .then((response) => response.text())
          // .then((response) => response.json())
          .then((result) => {
            console.log("SUCCESS");
            console.log("result: " + result);
          })
          .catch((error) => {
            console.log("INDEX MESSAGE SEND CATCH:");
            console.log(error);
            // $("#failed-alert").fadeIn("slow");
            // displayJsonResponse(error);
          })
          .finally(() => {
            console.log("FINALLY");
            // $("#submit").attr("disabled", false);
          });
        // END FETCH
      }
      // END MESSAGE SEND
    </script>
  </body>
</html>
